// <auto-generated />
using System;
using IK.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IK.Persistence.Migrations
{
    [DbContext(typeof(IKContext))]
    [Migration("20230612111029_ea")]
    partial class ea
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("IK.Domain.Concrete.Gnl.Gnl_EduType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("LangKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Gnl_EduType");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Gnl.Gnl_InvCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("LangKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ParentID")
                        .HasColumnType("integer");

                    b.Property<int>("SyncID")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Gnl_InvCategory");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Gnl.Gnl_InvTrans", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FromID")
                        .HasColumnType("integer");

                    b.Property<int>("InventoryID")
                        .HasColumnType("integer");

                    b.Property<int>("ToID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InventoryID");

                    b.ToTable("Gnl_InvTrans");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Gnl.Gnl_Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.Property<string>("SpecialCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<int>("SysCompanyID")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PersonID");

                    b.HasIndex("SysCompanyID");

                    b.ToTable("Gnl_Inventory");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Gnl.Gnl_InventoryConCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("InvCategoryID")
                        .HasColumnType("integer");

                    b.Property<int>("InventoryID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InvCategoryID");

                    b.HasIndex("InventoryID");

                    b.ToTable("Gnl_InventoryConCategory");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Gnl.Gnl_LeaveType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<short>("IsDamaged")
                        .HasColumnType("smallint");

                    b.Property<short>("IsPaid")
                        .HasColumnType("smallint");

                    b.Property<string>("LangKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<int>("SyncID")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("LeaveTypes");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Gnl.Gnl_LobbyDashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("LangKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Gnl_LobbyDashboard");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Gnl.Gnl_PersonConDashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DashID")
                        .HasColumnType("integer");

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.Property<int>("SysLobbyDashboardId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonID");

                    b.HasIndex("SysLobbyDashboardId");

                    b.ToTable("Gnl_PersonConDashboard");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Gnl.Gnl_PersonConDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.Property<int>("SysDepartmentID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonID");

                    b.HasIndex("SysDepartmentID");

                    b.ToTable("Gnl_PersonConDepartment");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Gnl.Gnl_PersonConModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.Property<int>("SysModuleID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonID");

                    b.HasIndex("SysModuleID");

                    b.ToTable("Gnl_PersonConModule");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Gnl.Gnl_PersonConModuleMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.Property<int>("SysModuleMenuID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonID");

                    b.HasIndex("SysModuleMenuID");

                    b.ToTable("Gnl_PersonConModuleMenu");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Gnl.Gnl_PersonConPerM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PerMID")
                        .HasColumnType("integer");

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonID");

                    b.ToTable("Gnl_PersonConPerM");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Gnl.Gnl_PersonConPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<int>("SysPositionID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("SysPositionID");

                    b.ToTable("Gnl_PersonConPositions");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Gnl.Gnl_PersonConRollcallDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.Property<int>("SysDepartmentID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonID");

                    b.HasIndex("SysDepartmentID");

                    b.ToTable("Gnl_PersonConRollcallDepartment");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Gnl.Gnl_PersonConShift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.Property<int>("SysShiftID")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("TargetedAt")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("PersonID");

                    b.HasIndex("SysShiftID");

                    b.ToTable("Gnl_PersonConShift");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Gnl.Gnl_PersonConWorkGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.Property<int>("SysWorkGroupId")
                        .HasColumnType("integer");

                    b.Property<int>("WorkGroupID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonID");

                    b.HasIndex("SysWorkGroupId");

                    b.ToTable("Gnl_PersonConWorkGroup");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Gnl.Gnl_PersonConWorkTemp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.Property<int>("SysWorkTempID")
                        .HasColumnType("integer");

                    b.Property<string>("YearSection")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PersonID");

                    b.HasIndex("SysWorkTempID");

                    b.ToTable("Gnl_PersonConWorkTemp");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Gnl.Gnl_PersonPassaport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("code")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("country")
                        .HasColumnType("text");

                    b.Property<DateTime?>("endAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("nation")
                        .HasColumnType("text");

                    b.Property<DateTime?>("startAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Gnl_PersonPassaports");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Gnl.Gnl_PersonPepper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<short>("Acheck")
                        .HasColumnType("smallint");

                    b.Property<short>("CHMD")
                        .HasColumnType("smallint");

                    b.Property<short>("CHMcheck")
                        .HasColumnType("smallint");

                    b.Property<short>("CMD")
                        .HasColumnType("smallint");

                    b.Property<short>("CMcheck")
                        .HasColumnType("smallint");

                    b.Property<short>("Ccheck")
                        .HasColumnType("smallint");

                    b.Property<string>("Dashboard")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("IMD")
                        .HasColumnType("smallint");

                    b.Property<short>("IMcheck")
                        .HasColumnType("smallint");

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("IPcheck")
                        .HasColumnType("smallint");

                    b.Property<string>("LDDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("LDProperty")
                        .HasColumnType("smallint");

                    b.Property<string>("Lang")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PGManager")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("PepperSys")
                        .HasColumnType("smallint");

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.Property<short>("SMD")
                        .HasColumnType("smallint");

                    b.Property<short>("SMcheck")
                        .HasColumnType("smallint");

                    b.Property<short>("Scheck")
                        .HasColumnType("smallint");

                    b.Property<string>("TLang")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TermID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("VMD")
                        .HasColumnType("smallint");

                    b.Property<short>("VMcheck")
                        .HasColumnType("smallint");

                    b.Property<short>("Vcheck")
                        .HasColumnType("smallint");

                    b.Property<string>("WDDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("WDcheck")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("PersonID");

                    b.ToTable("Gnl_PersonPepper");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Gnl.Gnl_WorkGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ParentID")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Gnl_WorkGroup");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Gnl.Gnl_WorkTemp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("LangKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Gnl_WorkTemp");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Gnl.Gnl_WorkTempItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<int>("SysWorkTempID")
                        .HasColumnType("integer");

                    b.Property<int>("dayid")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SysWorkTempID");

                    b.ToTable("Gnl_WorkTempItem");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CTypeID")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CountryID")
                        .HasColumnType("integer");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("numeric");

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PersonID");

                    b.ToTable("Sys_Address");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RegNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sys_Companies");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_Demand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("StatusNote")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SysDemandTypeID")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PersonID");

                    b.HasIndex("SysDemandTypeID");

                    b.ToTable("Sys_Demand");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_DemandType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("LangKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sys_DemandType");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Gnl_WorkTempId")
                        .HasColumnType("integer");

                    b.Property<string>("LangKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ParentID")
                        .HasColumnType("integer");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<int>("SuperVisorID")
                        .HasColumnType("integer");

                    b.Property<int>("SyncID")
                        .HasColumnType("integer");

                    b.Property<int>("SysCompanyID")
                        .HasColumnType("integer");

                    b.Property<int>("SysWorkTempID")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Gnl_WorkTempId");

                    b.HasIndex("SysCompanyID");

                    b.ToTable("Sys_Department");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("LFile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.Property<int>("SysDocumentTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("TypeID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonID");

                    b.HasIndex("SysDocumentTypeId");

                    b.ToTable("Sys_Document");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("LangKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MyProperty")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("TypeID")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Sys_DocumentType");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryID")
                        .HasColumnType("integer");

                    b.Property<int>("FixerID")
                        .HasColumnType("integer");

                    b.Property<int?>("Gnl_WorkTempItemId")
                        .HasColumnType("integer");

                    b.Property<string>("LFile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<int>("SysFeedbackCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Gnl_WorkTempItemId");

                    b.HasIndex("PersonID");

                    b.HasIndex("SysFeedbackCategoryId");

                    b.ToTable("Sys_Feedback");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_FeedbackCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("LangKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Typeid")
                        .HasColumnType("integer");

                    b.Property<int>("sysid")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Sys_FeedbackCategory");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_FeedbackTrans", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<int>("SysFeedbackID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SysFeedbackID");

                    b.ToTable("Sys_FeedbackTrans");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_MenuPer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("LangKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PerKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<int>("SysModuleMenuID")
                        .HasColumnType("integer");

                    b.Property<int?>("Sys_ModuleMenuId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Sys_ModuleMenuId");

                    b.ToTable("Sys_MenuPer");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("IsMain")
                        .HasColumnType("smallint");

                    b.Property<string>("LangKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrderNo")
                        .HasColumnType("integer");

                    b.Property<int>("ParentID")
                        .HasColumnType("integer");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Vers")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sys_Module");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_ModuleMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LangKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MenuGroup")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrderNo")
                        .HasColumnType("integer");

                    b.Property<int>("ParentID")
                        .HasColumnType("integer");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<int>("SyncID")
                        .HasColumnType("integer");

                    b.Property<int>("SysModuleID")
                        .HasColumnType("integer");

                    b.Property<string>("TestUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SysModuleID");

                    b.ToTable("Sys_ModuleMenu");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("PersonFingerID")
                        .HasColumnType("integer");

                    b.Property<int>("PersonTypeID")
                        .HasColumnType("integer");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<int?>("SyncID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonTypeID");

                    b.ToTable("Sys_Persons");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_PersonCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("BirthPlace")
                        .HasColumnType("text");

                    b.Property<int?>("Body")
                        .HasColumnType("integer");

                    b.Property<string>("DriverLicense")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EnteredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExitedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FathersName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("FootNumber")
                        .HasColumnType("integer");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<int?>("Height")
                        .HasColumnType("integer");

                    b.Property<int?>("ID_No")
                        .HasColumnType("integer");

                    b.Property<string>("LFile")
                        .HasColumnType("text");

                    b.Property<int?>("MaritalStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("MilitaryStatus")
                        .HasColumnType("integer");

                    b.Property<string>("MothersName")
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .HasColumnType("text");

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.Property<string>("Serial_No")
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<int>("SysCompanyID")
                        .HasColumnType("integer");

                    b.Property<int?>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonID")
                        .IsUnique();

                    b.HasIndex("SysCompanyID");

                    b.ToTable("Sys_PersonCard");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_PersonConShift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.Property<int>("SysShiftID")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("TargetedAt")
                        .HasColumnType("date");

                    b.Property<short>("TypeID")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("PersonID");

                    b.HasIndex("SysShiftID");

                    b.ToTable("Sys_PersonConShift");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_PersonEdu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EndYear")
                        .HasColumnType("integer");

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LFile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SysEduTypeID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonID");

                    b.HasIndex("SysEduTypeID");

                    b.ToTable("Sys_PersonEdu");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_PersonFinger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DeviceID")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("OrginalDate")
                        .HasColumnType("date");

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonID");

                    b.ToTable("Sys_PersonFinger");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_PersonType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("LangKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Sys_PersonTypes");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_PersonVisa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<int>("SyncID")
                        .HasColumnType("integer");

                    b.Property<int>("SysVisaTypeID")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PersonID");

                    b.HasIndex("SysVisaTypeID");

                    b.ToTable("Sys_PersonVisa");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("LangKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ParentID")
                        .HasColumnType("integer");

                    b.Property<int?>("SyncID")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sys_Position");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_Rollcall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("CheckedAt")
                        .HasColumnType("date");

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonID");

                    b.ToTable("Sys_Rollcall");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_Shift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SysDepartmentID")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SysDepartmentID");

                    b.ToTable("Sys_Shift");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_Social", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CTypeID")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.Property<int>("STypeID")
                        .HasColumnType("integer");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PersonID");

                    b.ToTable("sys_Socials");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("Utype")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonID")
                        .IsUnique();

                    b.ToTable("Sys_Users");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_UserToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SysUserID")
                        .HasColumnType("integer");

                    b.Property<string>("UserSign")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SysUserID");

                    b.ToTable("Sys_UserToken");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_VisaType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("LangKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SyncID")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sys_VisaType");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Tahmin.maliyetzarari", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DevamsizGun")
                        .HasColumnType("integer");

                    b.Property<int>("Durum")
                        .HasColumnType("integer");

                    b.Property<double>("GunlukUcret")
                        .HasColumnType("double precision");

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.Property<int?>("Sys_PersonId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Yil")
                        .HasColumnType("integer");

                    b.Property<double>("Zarar")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("Sys_PersonId");

                    b.ToTable("maliyetzarari");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Tahmin.personleaves", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LFile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("SyncID")
                        .HasColumnType("integer");

                    b.Property<int>("SysLeaveTypeID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PersonID");

                    b.HasIndex("SysLeaveTypeID");

                    b.ToTable("personleaves");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Tahmin.totaltahmin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CalisilmayanGunler")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("TotalTahmin")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Yil")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("totaltahmin");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Tahmin.zarartahmini", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.Property<double>("TahminiZarar")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Yil")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonID");

                    b.ToTable("zarartahmini");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Gnl.Gnl_InvTrans", b =>
                {
                    b.HasOne("IK.Domain.Concrete.Gnl.Gnl_Inventory", "Inventory")
                        .WithMany("InvTranses")
                        .HasForeignKey("InventoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Gnl.Gnl_Inventory", b =>
                {
                    b.HasOne("IK.Domain.Concrete.Sys.Sys_Person", "Person")
                        .WithMany("Inventories")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IK.Domain.Concrete.Sys.Sys_Company", "SysCompany")
                        .WithMany("Inventories")
                        .HasForeignKey("SysCompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("SysCompany");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Gnl.Gnl_InventoryConCategory", b =>
                {
                    b.HasOne("IK.Domain.Concrete.Gnl.Gnl_InvCategory", "InvCategory")
                        .WithMany("InventoryConCategories")
                        .HasForeignKey("InvCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IK.Domain.Concrete.Gnl.Gnl_Inventory", "Inventory")
                        .WithMany("InventoryConCategories")
                        .HasForeignKey("InventoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvCategory");

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Gnl.Gnl_PersonConDashboard", b =>
                {
                    b.HasOne("IK.Domain.Concrete.Sys.Sys_Person", "Person")
                        .WithMany("PersonConDashboards")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IK.Domain.Concrete.Gnl.Gnl_LobbyDashboard", "SysLobbyDashboard")
                        .WithMany("PersonConDashboards")
                        .HasForeignKey("SysLobbyDashboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("SysLobbyDashboard");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Gnl.Gnl_PersonConDepartment", b =>
                {
                    b.HasOne("IK.Domain.Concrete.Sys.Sys_Person", "Person")
                        .WithMany("PersonConDepartments")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IK.Domain.Concrete.Sys.Sys_Department", "SysDepartment")
                        .WithMany("PersonConDepartments")
                        .HasForeignKey("SysDepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("SysDepartment");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Gnl.Gnl_PersonConModule", b =>
                {
                    b.HasOne("IK.Domain.Concrete.Sys.Sys_Person", "Person")
                        .WithMany("PersonConModules")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IK.Domain.Concrete.Sys.Sys_Module", "SysModule")
                        .WithMany("PersonConModules")
                        .HasForeignKey("SysModuleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("SysModule");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Gnl.Gnl_PersonConModuleMenu", b =>
                {
                    b.HasOne("IK.Domain.Concrete.Sys.Sys_Person", "Person")
                        .WithMany("PersonConModuleMenus")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IK.Domain.Concrete.Sys.Sys_ModuleMenu", "SysModuleMenu")
                        .WithMany("PersonConModuleMenus")
                        .HasForeignKey("SysModuleMenuID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("SysModuleMenu");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Gnl.Gnl_PersonConPerM", b =>
                {
                    b.HasOne("IK.Domain.Concrete.Sys.Sys_Person", "Person")
                        .WithMany("PersonConPerMs")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Gnl.Gnl_PersonConPosition", b =>
                {
                    b.HasOne("IK.Domain.Concrete.Sys.Sys_Person", "Person")
                        .WithMany("PersonConPositions")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IK.Domain.Concrete.Sys.Sys_Position", "SysPosition")
                        .WithMany("PersonConPositions")
                        .HasForeignKey("SysPositionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("SysPosition");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Gnl.Gnl_PersonConRollcallDepartment", b =>
                {
                    b.HasOne("IK.Domain.Concrete.Sys.Sys_Person", "Person")
                        .WithMany("PersonConRollcallDepartments")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IK.Domain.Concrete.Sys.Sys_Department", "SysDepartment")
                        .WithMany("PersonConRollcallDepartments")
                        .HasForeignKey("SysDepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("SysDepartment");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Gnl.Gnl_PersonConShift", b =>
                {
                    b.HasOne("IK.Domain.Concrete.Sys.Sys_Person", "Person")
                        .WithMany("PersonConShifts")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IK.Domain.Concrete.Sys.Sys_Shift", "SysShift")
                        .WithMany("PersonConShifts")
                        .HasForeignKey("SysShiftID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("SysShift");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Gnl.Gnl_PersonConWorkGroup", b =>
                {
                    b.HasOne("IK.Domain.Concrete.Sys.Sys_Person", "Person")
                        .WithMany("PersonConWorkGroups")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IK.Domain.Concrete.Gnl.Gnl_WorkGroup", "SysWorkGroup")
                        .WithMany("PersonConWorkGroups")
                        .HasForeignKey("SysWorkGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("SysWorkGroup");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Gnl.Gnl_PersonConWorkTemp", b =>
                {
                    b.HasOne("IK.Domain.Concrete.Sys.Sys_Person", "Person")
                        .WithMany("PersonConWorkTemps")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IK.Domain.Concrete.Gnl.Gnl_WorkTemp", "SysWorkTemp")
                        .WithMany("PersonConWorkTemps")
                        .HasForeignKey("SysWorkTempID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("SysWorkTemp");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Gnl.Gnl_PersonPassaport", b =>
                {
                    b.HasOne("IK.Domain.Concrete.Sys.Sys_Person", "Person")
                        .WithOne("PersonPassaport")
                        .HasForeignKey("IK.Domain.Concrete.Gnl.Gnl_PersonPassaport", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Gnl.Gnl_PersonPepper", b =>
                {
                    b.HasOne("IK.Domain.Concrete.Sys.Sys_Person", "Person")
                        .WithMany("PersonPeppers")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Gnl.Gnl_WorkTempItem", b =>
                {
                    b.HasOne("IK.Domain.Concrete.Gnl.Gnl_WorkTemp", "SysWorkTemp")
                        .WithMany("SysWorkTempItems")
                        .HasForeignKey("SysWorkTempID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SysWorkTemp");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_Address", b =>
                {
                    b.HasOne("IK.Domain.Concrete.Sys.Sys_Person", "Person")
                        .WithMany("PersonAddresses")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_Demand", b =>
                {
                    b.HasOne("IK.Domain.Concrete.Sys.Sys_Person", "Person")
                        .WithMany("SysDemands")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IK.Domain.Concrete.Sys.Sys_DemandType", "SysDemandType")
                        .WithMany("SysDemands")
                        .HasForeignKey("SysDemandTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("SysDemandType");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_Department", b =>
                {
                    b.HasOne("IK.Domain.Concrete.Gnl.Gnl_WorkTemp", null)
                        .WithMany("SysDepartments")
                        .HasForeignKey("Gnl_WorkTempId");

                    b.HasOne("IK.Domain.Concrete.Sys.Sys_Company", "SysCompany")
                        .WithMany("SysDepartments")
                        .HasForeignKey("SysCompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SysCompany");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_Document", b =>
                {
                    b.HasOne("IK.Domain.Concrete.Sys.Sys_Person", "Person")
                        .WithMany("PersonDocuments")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IK.Domain.Concrete.Sys.Sys_DocumentType", "SysDocumentType")
                        .WithMany("PersonDocuments")
                        .HasForeignKey("SysDocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("SysDocumentType");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_Feedback", b =>
                {
                    b.HasOne("IK.Domain.Concrete.Gnl.Gnl_WorkTempItem", null)
                        .WithMany("SysFeedbacks")
                        .HasForeignKey("Gnl_WorkTempItemId");

                    b.HasOne("IK.Domain.Concrete.Sys.Sys_Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IK.Domain.Concrete.Sys.Sys_FeedbackCategory", "SysFeedbackCategory")
                        .WithMany("SysFeedbacks")
                        .HasForeignKey("SysFeedbackCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("SysFeedbackCategory");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_FeedbackTrans", b =>
                {
                    b.HasOne("IK.Domain.Concrete.Sys.Sys_Feedback", "SysFeedback")
                        .WithMany("SysFeedbackTrans")
                        .HasForeignKey("SysFeedbackID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SysFeedback");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_MenuPer", b =>
                {
                    b.HasOne("IK.Domain.Concrete.Sys.Sys_ModuleMenu", null)
                        .WithMany("SysMenuPers")
                        .HasForeignKey("Sys_ModuleMenuId");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_ModuleMenu", b =>
                {
                    b.HasOne("IK.Domain.Concrete.Sys.Sys_Module", "SysModule")
                        .WithMany("SysModuleMenus")
                        .HasForeignKey("SysModuleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SysModule");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_Person", b =>
                {
                    b.HasOne("IK.Domain.Concrete.Sys.Sys_PersonType", "PersonType")
                        .WithMany("Persons")
                        .HasForeignKey("PersonTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonType");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_PersonCard", b =>
                {
                    b.HasOne("IK.Domain.Concrete.Sys.Sys_Person", "Person")
                        .WithOne("PersonCard")
                        .HasForeignKey("IK.Domain.Concrete.Sys.Sys_PersonCard", "PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IK.Domain.Concrete.Sys.Sys_Company", "SysCompany")
                        .WithMany("PersonCards")
                        .HasForeignKey("SysCompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("SysCompany");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_PersonConShift", b =>
                {
                    b.HasOne("IK.Domain.Concrete.Sys.Sys_Person", "Person")
                        .WithMany("SysPersonConShifts")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IK.Domain.Concrete.Sys.Sys_Shift", "SysShift")
                        .WithMany("SysPersonConShifts")
                        .HasForeignKey("SysShiftID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("SysShift");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_PersonEdu", b =>
                {
                    b.HasOne("IK.Domain.Concrete.Sys.Sys_Person", "Person")
                        .WithMany("PersonEdus")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IK.Domain.Concrete.Gnl.Gnl_EduType", "SysEduType")
                        .WithMany("PersonEdus")
                        .HasForeignKey("SysEduTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("SysEduType");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_PersonFinger", b =>
                {
                    b.HasOne("IK.Domain.Concrete.Sys.Sys_Person", "Person")
                        .WithMany("PersonFingers")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_PersonVisa", b =>
                {
                    b.HasOne("IK.Domain.Concrete.Sys.Sys_Person", "Person")
                        .WithMany("PersonVisas")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IK.Domain.Concrete.Sys.Sys_VisaType", "SysVisaType")
                        .WithMany("PersonVisas")
                        .HasForeignKey("SysVisaTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("SysVisaType");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_Rollcall", b =>
                {
                    b.HasOne("IK.Domain.Concrete.Sys.Sys_Person", "Person")
                        .WithMany("SysRollcalls")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_Shift", b =>
                {
                    b.HasOne("IK.Domain.Concrete.Sys.Sys_Department", "SysDepartment")
                        .WithMany("SysShifts")
                        .HasForeignKey("SysDepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SysDepartment");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_Social", b =>
                {
                    b.HasOne("IK.Domain.Concrete.Sys.Sys_Person", "Person")
                        .WithMany("PersonSocials")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_User", b =>
                {
                    b.HasOne("IK.Domain.Concrete.Sys.Sys_Person", "Person")
                        .WithOne("SysUser")
                        .HasForeignKey("IK.Domain.Concrete.Sys.Sys_User", "PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_UserToken", b =>
                {
                    b.HasOne("IK.Domain.Concrete.Sys.Sys_User", "SysUser")
                        .WithMany("SysUserTokens")
                        .HasForeignKey("SysUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SysUser");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Tahmin.maliyetzarari", b =>
                {
                    b.HasOne("IK.Domain.Concrete.Sys.Sys_Person", null)
                        .WithMany("Maliyetzarari")
                        .HasForeignKey("Sys_PersonId");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Tahmin.personleaves", b =>
                {
                    b.HasOne("IK.Domain.Concrete.Sys.Sys_Person", "Person")
                        .WithMany("PersonLeaves")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IK.Domain.Concrete.Gnl.Gnl_LeaveType", "SysLeaveType")
                        .WithMany("PersonLeaves")
                        .HasForeignKey("SysLeaveTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("SysLeaveType");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Tahmin.zarartahmini", b =>
                {
                    b.HasOne("IK.Domain.Concrete.Sys.Sys_Person", "Person")
                        .WithMany("Zarartahmini")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Gnl.Gnl_EduType", b =>
                {
                    b.Navigation("PersonEdus");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Gnl.Gnl_InvCategory", b =>
                {
                    b.Navigation("InventoryConCategories");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Gnl.Gnl_Inventory", b =>
                {
                    b.Navigation("InvTranses");

                    b.Navigation("InventoryConCategories");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Gnl.Gnl_LeaveType", b =>
                {
                    b.Navigation("PersonLeaves");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Gnl.Gnl_LobbyDashboard", b =>
                {
                    b.Navigation("PersonConDashboards");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Gnl.Gnl_WorkGroup", b =>
                {
                    b.Navigation("PersonConWorkGroups");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Gnl.Gnl_WorkTemp", b =>
                {
                    b.Navigation("PersonConWorkTemps");

                    b.Navigation("SysDepartments");

                    b.Navigation("SysWorkTempItems");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Gnl.Gnl_WorkTempItem", b =>
                {
                    b.Navigation("SysFeedbacks");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_Company", b =>
                {
                    b.Navigation("Inventories");

                    b.Navigation("PersonCards");

                    b.Navigation("SysDepartments");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_DemandType", b =>
                {
                    b.Navigation("SysDemands");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_Department", b =>
                {
                    b.Navigation("PersonConDepartments");

                    b.Navigation("PersonConRollcallDepartments");

                    b.Navigation("SysShifts");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_DocumentType", b =>
                {
                    b.Navigation("PersonDocuments");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_Feedback", b =>
                {
                    b.Navigation("SysFeedbackTrans");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_FeedbackCategory", b =>
                {
                    b.Navigation("SysFeedbacks");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_Module", b =>
                {
                    b.Navigation("PersonConModules");

                    b.Navigation("SysModuleMenus");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_ModuleMenu", b =>
                {
                    b.Navigation("PersonConModuleMenus");

                    b.Navigation("SysMenuPers");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_Person", b =>
                {
                    b.Navigation("Inventories");

                    b.Navigation("Maliyetzarari");

                    b.Navigation("PersonAddresses");

                    b.Navigation("PersonCard")
                        .IsRequired();

                    b.Navigation("PersonConDashboards");

                    b.Navigation("PersonConDepartments");

                    b.Navigation("PersonConModuleMenus");

                    b.Navigation("PersonConModules");

                    b.Navigation("PersonConPerMs");

                    b.Navigation("PersonConPositions");

                    b.Navigation("PersonConRollcallDepartments");

                    b.Navigation("PersonConShifts");

                    b.Navigation("PersonConWorkGroups");

                    b.Navigation("PersonConWorkTemps");

                    b.Navigation("PersonDocuments");

                    b.Navigation("PersonEdus");

                    b.Navigation("PersonFingers");

                    b.Navigation("PersonLeaves");

                    b.Navigation("PersonPassaport")
                        .IsRequired();

                    b.Navigation("PersonPeppers");

                    b.Navigation("PersonSocials");

                    b.Navigation("PersonVisas");

                    b.Navigation("SysDemands");

                    b.Navigation("SysPersonConShifts");

                    b.Navigation("SysRollcalls");

                    b.Navigation("SysUser")
                        .IsRequired();

                    b.Navigation("Zarartahmini");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_PersonType", b =>
                {
                    b.Navigation("Persons");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_Position", b =>
                {
                    b.Navigation("PersonConPositions");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_Shift", b =>
                {
                    b.Navigation("PersonConShifts");

                    b.Navigation("SysPersonConShifts");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_User", b =>
                {
                    b.Navigation("SysUserTokens");
                });

            modelBuilder.Entity("IK.Domain.Concrete.Sys.Sys_VisaType", b =>
                {
                    b.Navigation("PersonVisas");
                });
#pragma warning restore 612, 618
        }
    }
}
